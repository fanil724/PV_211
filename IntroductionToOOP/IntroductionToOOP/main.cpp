#include<iostream>
using namespace std;

class Point
{
	//Создавая структуру или класс мы создаем новый тип данных
	//Классы и структуры еще называют пользовательскими типами данных
	//					КЛАСС - ЭТО ТИП ДАННЫХ!!!
	//					СТРУКТУРА - ЭТО ТИП ДАННЫХ!!!
	double x;
	double y;
public:
};

void main()
{
	setlocale(LC_ALL, "Russian");
	int a;	//Объявление переменной 'a' типа 'int'
	Point A;//Объявление переменной 'A' типа 'Point'
			//Создание объекта 'A' структуры 'Point'
			//Создание экземпляра 'A' структуры 'Point'
			//Объекты классов и структур еще называют экземплярами классов и структур.

	A.x = 2;
	A.y = 3;
	cout << A.x << "\t" << A.y << endl;

	Point* pA = &A;	//https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%BD%D0%B3%D0%B5%D1%80%D1%81%D0%BA%D0%B0%D1%8F_%D0%BD%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F
	cout << pA->x << "\t" << pA->y << endl;
}

/*
--------------------------------------------------------------
.  - Оператор прямого доступа (Point operator) 
	 используется для доступа к полям объекта по ИМЕНИ объекта.

-> - Оператор косвенного доступа (Arrow operator)
	 используется для доступа к полям объекта по АДРЕСУ объекта.
--------------------------------------------------------------
*/

/*
--------------------------------------------------------------
				OOP concepts:
1. Encapsulation - сокрытие определенной части класса от внешнего мира.
	Модификаторы доступа
		private:	закрытые поля, доступны только внутри класса
		public:		открытые поля, доступны из любого места программы
		protected:	защищенные поля, доступны только внутри класса, и его дочерних классов.
					используется только при наследовании.

	get/set-методы  используются для доступа к закрытым переменным в классе
		get (взять, получить) используются для доступа к закрытым переменным на чтение, т.е.,
							  позволяют получить значение закрытой переменной.
		set (задать, установить) используются для доступа к закрытым перемееным на запись, т.е.,
							  позволяют задать значение закрытой переменной.
							  Кроме того, set-методы обеспечивают фильтрацию данных.
2. Inheritance;
3. Polymorphism;
--------------------------------------------------------------
*/